mutate(
label = recode(
seurat_clusters,
!!!setNames(replace_list, replace_list),
.default = label
)
)
NF_subset@meta.data %>%
mutate(
label = recode(
seurat_clusters,
!!!setNames(replace_list, replace_list),
.default = seurat_clusters
)
)
match(NF_subset$seurat_clusters,names(replace_list))
NF_subset$BB_manual<-replace_list[match(NF_subset$seurat_clusters,names(replace_list))]
Idents(NF_subset)<-"BB_manual"
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap") + NoLegend()
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="8")%>%
slice(1:45)%>%
data.frame()
FindMarkers(NF_subset,ident.1 = "1",ident.2 = "9")
Idents(NF_subset)<-"seurat_clusters"
FindMarkers(NF_subset,ident.1 = "1",ident.2 = "9")
FindMarkers(NF_subset,ident.1 = "1",ident.2 = "9")
FindMarkers(NF_subset,ident.1 = "10",ident.2 = "9")
FindMarkers(NF_subset,ident.1 = "10",ident.2 = "8")
Seurat::VlnPlot(NF_subset,features = "Xist")
Seurat::VlnPlot(NF_subset,features = "Tsix")
Seurat::VlnPlot(NF_subset,features = "Kit")
Seurat::VlnPlot(NF_subset,features = "Flt3")
Seurat::VlnPlot(NF_subset,features = "Hoxa9")
Seurat::VlnPlot(NF_subset,features = "Ebf1")
Seurat::VlnPlot(NF_subset,features = "Cd3e")
Seurat::VlnPlot(NF_subset,features = "Csf1r")
FindMarkers(NF_subset,ident.1 = "10",ident.2 = "8")
Seurat::VlnPlot(NF_subset,features = "Tcf4")
FindMarkers(NF_subset,ident.1 = "2",ident.2 = "1")
Seurat::VlnPlot(NF_subset,features = "Zeb2")
Seurat::VlnPlot(NF_subset,features = "Irf8")
diff_genes
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="2")%>%
filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
FindMarkers(NF_subset,ident.1 = "2",ident.2 = "1")
FindMarkers(NF_subset,ident.1 = "2",ident.2 = "1")
FindMarkers(NF_subset,ident.1 = "11",ident.2 = "1")
FindMarkers(NF_subset,ident.1 = "11",ident.2 = "1")
FindMarkers(NF_subset,ident.1 = "10",ident.2 = "11")
FindMarkers(NF_subset,ident.1 = "10",ident.2 = "11")
# load the RNA and ATAC data
NF_counts <- Read10X_h5("./mulitome/DNF/mDNF_filtered_feature_bc_matrix.h5")
NF_fragpath <- "./mulitome/DNF/atac_fragments.tsv.gz"
# create a Seurat object containing the RNA adata
NF <- CreateSeuratObject( counts = NF_counts$`Gene Expression`,assay = "RNA")
# create ATAC assay and add it to the object
NF[["ATAC"]] <- CreateChromatinAssay(counts = NF_counts$Peaks,sep = c(":", "-"),fragments = NF_fragpath,annotation = annotation)
DefaultAssay(NF) <- "ATAC"
NF <- NucleosomeSignal(NF)
NF <- TSSEnrichment(NF)
VlnPlot(
object = NF,
features = c("nCount_RNA", "nCount_ATAC", "TSS.enrichment", "nucleosome_signal"),
ncol = 4,
pt.size = 0
)
NF_subset <- subset(
x = NF,
subset = nCount_ATAC < 100000 &
nCount_RNA < 25000 &
nCount_ATAC > 1000 &
nCount_RNA > 1000 &
nucleosome_signal < 2 &
TSS.enrichment > 1
)
NF_subset
# call peaks using MACS2
peaks <- CallPeaks(NF_subset,macs2.path = "/Users/bowmanrl/miniconda/envs/chipseq/bin/macs2")
# remove peaks on nonstandard chromosomes and in genomic blacklist regions
peaks <- keepStandardChromosomes(peaks, pruning.mode = "coarse")
peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_mm10, invert = TRUE)
# quantify counts in each peak
macs2_counts <- FeatureMatrix(
fragments = Fragments(NF_subset),
features = peaks,
cells = colnames(NF_subset)
)
# create a new assay using the MACS2 peak set and add it to the Seurat object
NF_subset[["peaks"]] <- CreateChromatinAssay(
counts = macs2_counts,
fragments = NF_fragpath,
annotation = annotation
)
DefaultAssay(NF_subset) <- "RNA"
NF_subset <- SCTransform(NF_subset)
NF_subset <- SCTransform(NF_subset)
NF_subset <- RunPCA(NF_subset)
DefaultAssay(NF_subset) <- "peaks"
NF_subset <- FindTopFeatures(NF_subset, min.cutoff = 5)
NF_subset <- RunTFIDF(NF_subset)
NF_subset <- RunSVD(NF_subset)
# build a joint neighbor graph using both assays
NF_subset <- FindMultiModalNeighbors(
object = NF_subset,
reduction.list = list("pca", "lsi"),
dims.list = list(1:50, 2:40),
modality.weight.name = "RNA.weight",
verbose = TRUE
)
NF_subset <- FindClusters(NF_subset, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
# build a joint UMAP visualization
NF_subset <- RunUMAP(
object = NF_subset,
nn.name = "weighted.nn",
assay = "RNA",
verbose = TRUE
)
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
?FindClusters
NF_subset <- ?(NF_subset, graph.name = "wsnn", algorithm = 3, resolution = 0.6, verbose = FALSE)
NF_subset <- FindClusters(NF_subset, graph.name = "wsnn", algorithm = 3, resolution = 1, verbose = FALSE)
# build a joint UMAP visualization
NF_subset <- RunUMAP(
object = NF_subset,
nn.name = "weighted.nn",
assay = "RNA",
verbose = TRUE
)
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
NF_subset <- FindClusters(NF_subset, graph.name = "wsnn", algorithm = 3, resolution = 0.7, verbose = FALSE)
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
diff_genes<-FindAllMarkers(NF_subset)
FeaturePlot(NF_subset,features = "Gata2",reduction = "umap")
DefaultAssay(NF_subset) <- "RNA"
FeaturePlot(NF_subset,features = "Gata2",reduction = "umap")
FeaturePlot(NF_subset,features = "Kit",reduction = "umap")
FeaturePlot(NF_subset,features = "Meis1",reduction = "umap")
FeaturePlot(NF_subset,features = "Hoxa9",reduction = "umap")
FeaturePlot(NF_subset,features = "Itgam",reduction = "umap")
FeaturePlot(NF_subset,features = "Cd3d",reduction = "umap")
FeaturePlot(NF_subset,features = "Cd19",reduction = "umap")
FeaturePlot(NF_subset,features = "Lifr",reduction = "umap")
FeaturePlot(NF_subset,features = "Flt3",reduction = "umap")
FeaturePlot(NF_subset,features = "Hoxb5",reduction = "umap")
FeaturePlot(NF_subset,features = "Ly6a",reduction = "umap")
FeaturePlot(NF_subset,features = "Ly6e",reduction = "umap")
diff_genes<-FindAllMarkers(NF_subset)
diff_genes
diff_genes%>%
group_by(cluster)%>%
# filter(cluster=="2")%>%
#  filter(avg_log2FC>0)%>%
slice(1:15)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="0")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="1")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="2")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="0")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="4")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="3")%>%
#  filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="0")%>%
filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
diff_genes%>%
group_by(cluster)%>%
filter(cluster=="2")%>%
filter(avg_log2FC>0)%>%
slice(1:45)%>%
data.frame()
DNF_replace_list<-c("0"="DC",
"1"="",
"2"="LSK",
"3"="pDC",
"4"="Mac",
"5"="",
"6"="remove",
"7"="cycling",
"8"="",
"9"="Eryth")
NF_subset$BB_manual<-replace_list[match(NF_subset$seurat_clusters,names(DNF_replace_list))]
Idents(NF_subset)<-"BB_manual"
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
DefaultAssay(NF_subset) <- "peaks"
# first compute the GC content for each peak
NF_subset <- RegionStats(NF_subset, genome = BSgenome.Mmusculus.UCSC.mm10)
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Hoxa9","Meis1")
)
Idents(NF_subset)
idents.plot<-c("LSK","T","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Hoxa9",
features = "Hoxa9",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
idents.plot<-c("LSK","T","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
p1
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Hoxa9","Mecom")
)
idents.plot<-c("LSK","T","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
DNF_replace_list<-c("0"="DC",
"1"="",
"2"="LSK",
"3"="pDC",
"4"="Mac",
"5"="",
"6"="remove",
"7"="cycling",
"8"="",
"9"="Eryth")
NF_subset$BB_manual<-replace_list[match(NF_subset$seurat_clusters,names(DNF_replace_list))]
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
DNF_replace_list<-c("0"="DC",
"1"="",
"2"="LSK",
"3"="pDC",
"4"="Mac",
"5"="",
"6"="remove",
"7"="cycling",
"8"="",
"9"="Eryth")
NF_subset$BB_manual<-replace_list[match(NF_subset$seurat_clusters,names(DNF_replace_list))]
NF_subset$BB_manual
NF_subset$seurat_clusters
table(NF_subset$seurat_clusters)
NF_subset$BB_manual
table(NF_subset$BB_manual)
NF_subset
NF_subset$wsnn_res.0.7
NF_subset$BB_manual<-replace_list[match(NF_subset$wsnn_res.0.7,names(DNF_replace_list))]
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
Idents(NF_subset)<-"BB_manual"
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
NF_subset$BB_manual<-DNF_replace_list[match(NF_subset$wsnn_res.0.7,names(DNF_replace_list))]
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
Idents(NF_subset)<-"BB_manual"
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
Idents(NF_subset)
DNF_replace_list<-c("0"="DC",
"1"="1",
"2"="LSK",
"3"="pDC",
"4"="Mac",
"5"="5",
"6"="remove",
"7"="cycling",
"8"="8",
"9"="Eryth")
NF_subset$BB_manual<-DNF_replace_list[match(NF_subset$wsnn_res.0.7,names(DNF_replace_list))]
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
Idents(NF_subset)<-"BB_manual"
DimPlot(NF_subset, label = TRUE, repel = TRUE, reduction = "umap")
idents.plot<-c("LSK","T","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Hoxa9","Mecom","Hp","Mki67")
)
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Hp",
features = "Hp",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mki67",
features = "Mki67",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Hoxa9","Mecom","Irf8","Mki67")
)
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Hoxa9","Mecom","Irf8","Mki67")
)
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mki67",
features = "Mki67",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
p1 <- CoveragePlot(
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Irf8",
features = "Irf8",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Ms4a3","Mecom","Irf8","Mki67")
)
# link peaks to genes
NF_subset <- LinkPeaks(
object = NF_subset,
peak.assay = "peaks",
expression.assay = "SCT",
genes.use = c("Ms4a3","Mecom","Irf8","Mki67")
)
idents.plot<-c("LSK","Eryth","pDC","cycling")
p1 <- CoveragePlot(
object = NF_subset,
region = "Mecom",
features = "Mecom",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
p1
NF_subset@assays$peaks@var.features
# load the RNA and ATAC data
NF_counts <- Read10X_h5("./mulitome/DNF/mDNF_filtered_feature_bc_matrix.h5")
NF_fragpath <- "./mulitome/DNF/atac_fragments.tsv.gz"
# create a Seurat object containing the RNA adata
NF <- CreateSeuratObject( counts = NF_counts$`Gene Expression`,assay = "RNA")
# create ATAC assay and add it to the object
NF[["ATAC"]] <- CreateChromatinAssay(counts = NF_counts$Peaks,sep = c(":", "-"),fragments = NF_fragpath,annotation = annotation)
DefaultAssay(NF) <- "ATAC"
NF <- NucleosomeSignal(NF)
NF <- NucleosomeSignal(NF)
NF <- TSSEnrichment(NF)
VlnPlot(
object = NF,
features = c("nCount_RNA", "nCount_ATAC", "TSS.enrichment", "nucleosome_signal"),
ncol = 4,
pt.size = 0
)
NF_subset <- subset(
x = NF,
subset = nCount_ATAC < 100000 &
nCount_RNA < 25000 &
nCount_ATAC > 1000 &
nCount_RNA > 1000 &
nucleosome_signal < 2 &
TSS.enrichment > 1
)
NF_subset
# call peaks using MACS2
peaks <- CallPeaks(NF_subset,macs2.path = "/Users/bowmanrl/miniconda/envs/chipseq/bin/macs2")
# call peaks using MACS2
peaks <- CallPeaks(NF_subset,macs2.path = "/Users/bowmanrl/miniconda/envs/chipseq/bin/macs2")
# remove peaks on nonstandard chromosomes and in genomic blacklist regions
peaks <- keepStandardChromosomes(peaks, pruning.mode = "coarse")
peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_mm10, invert = TRUE)
# quantify counts in each peak
macs2_counts <- FeatureMatrix(
fragments = Fragments(NF_subset),
features = peaks,
cells = colnames(NF_subset)
)
?RunSVD
?RunTFIDF
library(devtools)
library(tidyverse)
library(fs)
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
gh_token_help()
create_github_token()
gh_token_help()
install.packages("gitcreads")
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
